---
import { Image } from 'astro:assets';
import localThaiQR from '../assets/local-thai-qr.png';
const { imgSrc, imgAlt, price, imei } = Astro.props;
---
<qr-code data-price={price} data-imei={imei}>
    <div class="flex flex-col justify-center items-center mt-5">
        <div class="test p-2 w-80 ">
            <img src={localThaiQR.src} alt="logo thai qr."/>
        </div>
        <div class="mb-5 ">
            <Image id="toggle-img" class="min-w-full w-80 blur-md" src={imgSrc} alt={imgAlt} inferSize={true}/>
        </div>
        <div class="mt-5 text-center">
            <button id="clickToPayButton" class="p-5 rounded-full text-3xl bg-blue-950 text-white" disabled>
                แสดงคิวอาร์ <span id="countDownText"> </span>
            </button>
        </div>

    </div>
</qr-code>

<script>
    import mqtt from 'mqtt'
    import type { IMachineState } from '../models/stateMachine';

    enum PaymentButtonText {
        READY = "แสดงคิวอาร์",
        QUEUEING = "พี่ๆรอแปบน้า มีคนกำลังชำระเงิน"
    }

    enum MachineStateMessage {
        AVAILABLE = "available",
        BUSY = "busy"
    }

    const tooltip = document.querySelector("#tooltip") as HTMLDivElement;
    const img = document.getElementById('toggle-img') as HTMLImageElement;
    const paymentButton = document.getElementById('clickToPayButton') as HTMLButtonElement;
    const mqttClient = mqtt.connect(
        "wss://c9b659e84f864702832199817fa68785.s1.eu.hivemq.cloud:8884/mqtt",
        {
            username: 'mawin',
            password: '.Action4lifestore',
            rejectUnauthorized: false
        })

    const topicToUpdateState = '1/status';
    const timeoutInMS = 90000;
    const topicToOrder = '1/order';
    const promptpayPhoneNumber = "1100702371502"
    let setTimeOutButton: number;


    function setBtnToReady() {
        paymentButton.innerText = PaymentButtonText.READY
        paymentButton.classList.remove("disabled:bg-slate-50", "disabled:text-slate-500",
            "disabled:border-slate-200", "disabled:shadow-none")
        paymentButton.disabled = false
    }

    function setBtnToBeQueueing() {
        paymentButton.innerText = PaymentButtonText.QUEUEING
        paymentButton.classList.add("disabled:bg-slate-50", "disabled:text-slate-500",
            "disabled:border-slate-200", "disabled:shadow-none")
        paymentButton.disabled = true
    }

    class QRCode extends HTMLElement {

        constructor() {
            super();
            const { price, imei } = this.dataset
            const twoDigitPrice = price?.split(".")[0] || ""
            const orderPayload = JSON.stringify({ imei, price })

            // Phone number should be queried from back server.
            const qrCodePaymentImg = this.generatePromptpayLink(promptpayPhoneNumber, twoDigitPrice);
            const qrCodePaymentImgFake = this.generatePromptpayLink("0824979555", "50");

            mqttClient.on('connect', () => {
                console.log("Connected to server")
                mqttClient.subscribe(topicToUpdateState)
                this.setupMqttClient();
            })

            const setQRCodeBlurAndShowBtnTimeOut = () => {
                window.setTimeout(
                    () => {
                        paymentButton.innerText = PaymentButtonText.READY
                        paymentButton.disabled = false;
                        img.classList.add('blur-md')
                        img.src = qrCodePaymentImgFake
                    }, timeoutInMS
                )
            }
            const setUpButtonEventListener = () => {
                paymentButton.addEventListener('click', () => {
                    const now = new Date();
                    const futureTime = new Date(now.getTime() + timeoutInMS).getTime();
                    const stateBusyPreparation: IMachineState = {
                        state: MachineStateMessage.BUSY,
                        expirationTime: futureTime,
                        from: "welcome-client"
                    }

                    if (
                        img.classList.contains('blur-md')
                    ) {
                        setQRCodeBlurAndShowBtnTimeOut();
                        setBtnToBeQueueing();
                        img.src = qrCodePaymentImg
                        img.classList.remove('blur-md', 'brightness-50')
                        mqttClient.publish(topicToOrder, orderPayload);
                        mqttClient.publish(topicToUpdateState, JSON.stringify(stateBusyPreparation), { retain: true });
                    }

                    if (!tooltip.classList.contains("animate-slideUp")) {
                        const safeAreaTop = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('env(safe-area-inset-top)')) || 0;
                        const topPosition = paymentButton.getBoundingClientRect().bottom + safeAreaTop;

                        tooltip.style.top = `${topPosition}px`;
                        tooltip.classList.add("animate-slideUp")
                        tooltip.classList.remove("hidden", "animate-slideDown")
                    }

                });
            }
            setUpButtonEventListener();
        }

        generatePromptpayLink(phoneNumber: string, amount: string) {
            return `https://promptpay.io/${phoneNumber}/${amount}`
        }

        mqttMessageOnStateChangeCallback(_: string, payload: ArrayBuffer) {
            const jsonPayload = JSON.parse(payload.toString()) as IMachineState;
            const stateAvailablePreparation = JSON.stringify({
                state: MachineStateMessage.AVAILABLE,
                expirationTime: null,
                from: "welcome-client"
            })

            const timeNow = new Date().getTime();

            if (jsonPayload?.state === MachineStateMessage.BUSY) {
                const dateFuture = new Date(jsonPayload.expirationTime).getTime();
                setBtnToBeQueueing();
                const isShouldSetResetBtnToReady = (dateFuture - timeNow) > 0;
                const differenceInMilliseconds = dateFuture - timeNow

                if (timeNow >= dateFuture) {
                    mqttClient.publish(topicToUpdateState, stateAvailablePreparation, { retain: true });
                }

                if (isShouldSetResetBtnToReady) {
                    setTimeOutButton = window.setTimeout(() => {
                        setBtnToReady();
                        img.classList.add('blur-md')
                        mqttClient.publish(topicToUpdateState, stateAvailablePreparation, { retain: true });
                    }, differenceInMilliseconds);
                }
            }

            if (jsonPayload?.state === MachineStateMessage.AVAILABLE) {
                setBtnToReady();
                img.classList.add('blur-md')
                clearTimeout(setTimeOutButton)
            }

        }

        setupMqttClient() {
            mqttClient.on('message', this.mqttMessageOnStateChangeCallback)
        }

    }

    customElements.define('qr-code', QRCode);
</script>

<style>

    .test {
        background-color: rgb(0, 54, 89);
    }

</style>
